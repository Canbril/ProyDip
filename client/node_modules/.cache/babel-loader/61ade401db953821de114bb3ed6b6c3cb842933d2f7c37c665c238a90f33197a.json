{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProyDip\\\\ProyDip\\\\client\\\\src\\\\GenerateKeys.js\";\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateKeys({\n  token\n}) {\n  const handleGenerateKeys = async () => {\n    try {\n      console.log(\"Token recibido:\", token); // Verifica si el token está presente\n\n      // Decodificar el token para obtener el username\n      const decodedToken = jwtDecode(token);\n      console.log(\"Token decodificado:\", decodedToken); // Verifica que el token se decodifique correctamente\n\n      const username = decodedToken.username;\n      if (!username) {\n        throw new Error('Username no disponible en el token');\n      }\n      console.log(\"Username extraído del token:\", username); // Verifica que el username se extraiga correctamente\n\n      const requestData = {\n        username\n      };\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/tasks/generate-keys`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}` // Asegúrate de pasar el token en el header\n        },\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        throw new Error('Error al generar las llaves');\n      }\n      const data = await response.blob();\n      console.log(\"Llave generada, descargando...\", data); // Verifica que se reciba la respuesta correctamente\n\n      // Si es necesario, puedes procesar el archivo binario recibido (por ejemplo, descargarlo como archivo)\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(data);\n      link.download = 'privateKey.pem';\n      link.click();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Generar Llaves RSA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateKeys,\n      children: \"Generar y Descargar Llaves\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_c = GenerateKeys;\nexport default GenerateKeys;\nvar _c;\n$RefreshReg$(_c, \"GenerateKeys\");","map":{"version":3,"names":["jwtDecode","jsxDEV","_jsxDEV","GenerateKeys","token","handleGenerateKeys","console","log","decodedToken","username","Error","requestData","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","ok","data","blob","link","document","createElement","href","URL","createObjectURL","download","click","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/ProyDip/ProyDip/client/src/GenerateKeys.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode';\r\n\r\nfunction GenerateKeys({ token }) {\r\n    const handleGenerateKeys = async () => {\r\n        try {\r\n            console.log(\"Token recibido:\", token);  // Verifica si el token está presente\r\n\r\n            // Decodificar el token para obtener el username\r\n            const decodedToken = jwtDecode(token);\r\n            console.log(\"Token decodificado:\", decodedToken);  // Verifica que el token se decodifique correctamente\r\n\r\n            const username = decodedToken.username;\r\n            if (!username) {\r\n                throw new Error('Username no disponible en el token');\r\n            }\r\n\r\n            console.log(\"Username extraído del token:\", username);  // Verifica que el username se extraiga correctamente\r\n\r\n            const requestData = { username };\r\n\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/api/tasks/generate-keys`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`  // Asegúrate de pasar el token en el header\r\n                },\r\n                body: JSON.stringify(requestData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Error al generar las llaves');\r\n            }\r\n\r\n            const data = await response.blob();\r\n            console.log(\"Llave generada, descargando...\", data);  // Verifica que se reciba la respuesta correctamente\r\n\r\n            // Si es necesario, puedes procesar el archivo binario recibido (por ejemplo, descargarlo como archivo)\r\n            const link = document.createElement('a');\r\n            link.href = URL.createObjectURL(data);\r\n            link.download = 'privateKey.pem';\r\n            link.click();\r\n\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Generar Llaves RSA</h1>\r\n            <button onClick={handleGenerateKeys}>Generar y Descargar Llaves</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GenerateKeys;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,YAAYA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAC7B,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,KAAK,CAAC,CAAC,CAAE;;MAExC;MACA,MAAMI,YAAY,GAAGR,SAAS,CAACI,KAAK,CAAC;MACrCE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEC,YAAY,CAAC,CAAC,CAAE;;MAEnD,MAAMC,QAAQ,GAAGD,YAAY,CAACC,QAAQ;MACtC,IAAI,CAACA,QAAQ,EAAE;QACX,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACzD;MAEAJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,QAAQ,CAAC,CAAC,CAAE;;MAExD,MAAME,WAAW,GAAG;QAAEF;MAAS,CAAC;MAEhC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,0BAA0B,EAAE;QACrFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUd,KAAK,EAAE,CAAE;QACxC,CAAC;QACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,WAAW;MACpC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACU,EAAE,EAAE;QACd,MAAM,IAAIZ,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMa,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClClB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEgB,IAAI,CAAC,CAAC,CAAE;;MAEtD;MACA,MAAME,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;MACrCE,IAAI,CAACM,QAAQ,GAAG,gBAAgB;MAChCN,IAAI,CAACO,KAAK,CAAC,CAAC;IAEhB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ3B,OAAO,CAAC2B,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACI/B,OAAA;IAAAgC,QAAA,gBACIhC,OAAA;MAAAgC,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BpC,OAAA;MAAQqC,OAAO,EAAElC,kBAAmB;MAAA6B,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEd;AAACE,EAAA,GAnDQrC,YAAY;AAqDrB,eAAeA,YAAY;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}