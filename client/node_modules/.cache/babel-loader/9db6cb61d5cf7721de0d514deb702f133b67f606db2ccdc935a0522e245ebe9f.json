{"ast":null,"code":"var _jsxFileName = \"/home/canbril/Documentos/Prueba/ProyDip/client/src/GenerateKeys.js\";\nimport React from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Importa correctamente la función\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateKeys({\n  token\n}) {\n  const handleGenerateKeys = async () => {\n    try {\n      // Decodificar el token para obtener el username\n      const decodedToken = jwtDecode(token); // Usar jwtDecode (en vez de jwt_decode)\n      const username = decodedToken.username; // Suponiendo que 'username' está en el payload del token\n\n      // Verificar que el username esté presente\n      if (!username) {\n        throw new Error('Username no disponible en el token');\n      }\n      const requestData = {\n        username\n      }; // Usar el username extraído del token\n\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/tasks/generate-keys`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}` // Incluye el token en el header para autenticación\n        },\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        throw new Error('Error al generar las llaves');\n      }\n      const data = await response.blob(); // Obtener la respuesta en formato binario para la descarga\n\n      // Aquí puedes agregar código para manejar el archivo si es necesario (por ejemplo, guardarlo)\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Generar Llaves RSA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateKeys,\n      children: \"Generar y Descargar Llaves\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_c = GenerateKeys;\nexport default GenerateKeys;\nvar _c;\n$RefreshReg$(_c, \"GenerateKeys\");","map":{"version":3,"names":["React","jwtDecode","jsxDEV","_jsxDEV","GenerateKeys","token","handleGenerateKeys","decodedToken","username","Error","requestData","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","ok","data","blob","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/canbril/Documentos/Prueba/ProyDip/client/src/GenerateKeys.js"],"sourcesContent":["import React from 'react';\nimport { jwtDecode } from 'jwt-decode';  // Importa correctamente la función\n\nfunction GenerateKeys({ token }) {\n    const handleGenerateKeys = async () => {\n        try {\n            // Decodificar el token para obtener el username\n            const decodedToken = jwtDecode(token);  // Usar jwtDecode (en vez de jwt_decode)\n            const username = decodedToken.username;  // Suponiendo que 'username' está en el payload del token\n\n            // Verificar que el username esté presente\n            if (!username) {\n                throw new Error('Username no disponible en el token');\n            }\n\n            const requestData = { username };  // Usar el username extraído del token\n\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/api/tasks/generate-keys`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`  // Incluye el token en el header para autenticación\n                },\n                body: JSON.stringify(requestData),\n            });\n\n            if (!response.ok) {\n                throw new Error('Error al generar las llaves');\n            }\n\n            const data = await response.blob(); // Obtener la respuesta en formato binario para la descarga\n\n            // Aquí puedes agregar código para manejar el archivo si es necesario (por ejemplo, guardarlo)\n\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Generar Llaves RSA</h1>\n            <button onClick={handleGenerateKeys}>Generar y Descargar Llaves</button>\n        </div>\n    );\n}\n\nexport default GenerateKeys;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,YAAYA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAC7B,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACA;MACA,MAAMC,YAAY,GAAGN,SAAS,CAACI,KAAK,CAAC,CAAC,CAAE;MACxC,MAAMG,QAAQ,GAAGD,YAAY,CAACC,QAAQ,CAAC,CAAE;;MAEzC;MACA,IAAI,CAACA,QAAQ,EAAE;QACX,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACzD;MAEA,MAAMC,WAAW,GAAG;QAAEF;MAAS,CAAC,CAAC,CAAE;;MAEnC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,0BAA0B,EAAE;QACrFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUZ,KAAK,EAAE,CAAE;QACxC,CAAC;QACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,WAAW;MACpC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACU,EAAE,EAAE;QACd,MAAM,IAAIZ,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMa,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEpC;IAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACIrB,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAAuB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3B3B,OAAA;MAAQ4B,OAAO,EAAEzB,kBAAmB;MAAAoB,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEd;AAACE,EAAA,GA1CQ5B,YAAY;AA4CrB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}